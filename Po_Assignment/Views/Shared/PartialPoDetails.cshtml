@model Po_Assignment.Models.Po_Details

@using (Html.BeginForm())
{
    <div class="container">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group row " >
            <div class="col-sm-4 mt-4">              
                @Html.DropDownListFor(model => model.MaterialEntryId, (SelectList)ViewBag.Materials, "Select Material", new { @class = "form-control", id = "materialDropdown", required = "required" })               
                @Html.ValidationMessageFor(model => model.MaterialEntryId, "", new { @class = "text-danger" })               
            </div>
            <div class="col-sm-4 ">
                <label for="shortText" class="control-label">Short Text</label>
                <input type="text" id="shortText" class="form-control" readonly />
            </div>

            <div class="col-sm-4">
                <label for="Unit" class="control-label">Unit</label>
                <input type="text" id="unit" class="form-control" readonly />
            </div>
        </div>
        &nbsp;
        <div class="form-group row">
            <label for="ItemQuantity" class="control-label col-md-2">Quantity<span style="color:red">*</span></label>
            <div class="col-sm-4">
                <input type="number" id="ItemQuantity" name="ItemQuantity" class="form-control" min="1" step="1" required>
                @Html.ValidationMessageFor(model => model.ItemQuantity, "", new { @class = "text-danger" })
            </div>
            <label for="ItemRate" class="control-label col-md-2">Rate<span style="color:red">*</span></label>
            <div class="col-sm-4">
                <input type="number" id="ItemRate" name="ItemRate" class="form-control" min="1" step="1" required>
                @Html.ValidationMessageFor(model => model.ItemRate, "", new { @class = "text-danger" })
            </div>
        </div>
      
       
        &nbsp;
        <div class="form-group row">
            <label for="ItemValue" class="control-label col-md-2">Amount</label>
            <div class="col-sm-4">
                @Html.EditorFor(model => model.ItemValue, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.ItemValue, "", new { @class = "text-danger" })
            </div>
            <label for="ExpectedDate" class="control-label col-md-2">Expected Date</label>
            <div class="col-sm-4">
                <input type="date" id="expecteddate" name="expecteddate" class="form-control" required>
            </div>
        </div>

        &nbsp;
        <div class="form-group row">
            <div class="col-md-offset-2 col-md-10">
                <button id="addLineBtn" type="button" class="btn btn-success">Add Line</button>
                <button Id="updateLineBtn" type="button" class="btn btn-warning">Update Line</button>
                <button id="removeLineBtn" type="button" class="btn btn-danger">Remove Line</button>
            </div>
        </div>
        &nbsp;
        <h4>Order Items</h4>
        <table id="orderItemsTable" class="table table-bordered">
            <thead>
                <tr>
                    <th scope="col">Select</th>
                    <th scope="col">Material</th>
                    <th scope="col">Quantity</th>
                    <th scope="col">Rate</th>
                    <th scope="col">Amount</th>
                    <th scope="col">Expected Date</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>


<script>
    $(document).ready(function () {
        $('#materialDropdown').change(function () {
            var materialId = $(this).val();
            $.ajax({
                url: '/PoDetails/GetMaterialDetails',
                type: 'GET',
                data: { materialId: materialId },
                success: function (result) {
                    $('#shortText').val(result.shortText);
                    $('#unit').val(result.unit);
                },
                error: function () {
                    alert('Error occurred while fetching material details.');
                }
            });
        });

        $('#ItemQuantity, #ItemRate').change(function () {
            var quantity = parseInt($('#ItemQuantity').val());
            var rate = parseInt($('#ItemRate').val());
            if (quantity > 0 && rate > 0) {
                var amount = quantity * rate;
                $('#ItemValue').val(amount.toFixed(2));
            } else {
                $('#ItemValue').val('');
            }
        });

      

        $('#addLineBtn').click(function () {
            var material = $('#materialDropdown').val();
            var shortText = $('#shortText').val();
            var unit = $('#unit').val();
            var quantity = $('#ItemQuantity').val();
            var rate = $('#ItemRate').val();
            var amount = $('#ItemValue').val();
            var expectedDate = $('#expecteddate').val();

            if (!material || !shortText || !unit || !quantity || !rate || !amount || !expectedDate) {
               // alert("Please fill in all fields.");
                Swal.fire({
                    title: 'Error!',
                    text: 'No please fill in all fields',
                    icon: 'error'
                });
                return;
            }

            var newRow = '<tr><td>' + material + '</td><td>' + shortText + '</td><td>' + quantity + '</td><td>' + rate + '</td><td>' + amount + '</td><td>' + expectedDate + '</td></tr>';
            $('tbody').append(newRow);

            var orderValue = calculateOrderValue();
            $('#orderValue').val(orderValue.toFixed(2));

            $('#materialDropdown, #shortText, #unit, #ItemQuantity, #ItemRate, #ItemValue, #expecteddate').val('');
        });



        $('#removeLineBtn').click(function () {
            var rowCount = $('tbody tr').length;
            if (rowCount > 0) {
                $('tbody tr:last').remove();
                var orderValue = calculateOrderValue();
                $('#orderValue').val(orderValue.toFixed(2));

                Swal.fire({
                    title: 'Success!',
                    text: 'Entry removed',
                    icon: 'success'
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: 'No entries found to remove',
                    icon: 'error'
                });
            }
        });     
      
    });

    function calculateOrderValue() {
        var total = 0;
        $('tbody tr').each(function () {
            var amount = parseFloat($(this).find('td:nth-child(5)').text());
            if (!isNaN(amount)) {
                total += amount;
            }
        });
        return total;
    }
</script>
